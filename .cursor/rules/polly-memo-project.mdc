---
alwaysApply: true
---

# 鹦鹉背诵（Polly Memo）项目指南

## 项目概述
**鹦鹉背诵：AI驱动的中小学背诵作业自动化平台**

本项目是专为中小学教师和学生设计的背诵作业自动化平台的服务端，负责AI与媒体文件的处理，提供REST API服务。

### 核心功能
- 音视频文件上传和处理
- 智能压缩和格式标准化（音频→MP3，视频→MP4）
- 云存储集成（Supabase Storage）
- 为AI背诵检查提供媒体文件支持

## 技术栈
- **Web框架**: FastAPI 0.116+ (高性能异步API框架)
- **数据验证**: Pydantic (类型安全的数据模式)
- **媒体处理**: FFmpeg (音视频压缩和格式转换)
- **云存储**: Supabase Storage (文件存储和CDN)
- **依赖管理**: uv (现代Python包管理器)
- **Python版本**: 3.12+

## 项目架构

### 核心入口点
- [main.py](mdc:main.py) - FastAPI应用主入口，包含CORS配置和健康检查

### 应用结构
```
app/
├── api/v1/                 # API路由层
│   └── endpoints/
│       └── media.py        # 媒体文件处理端点
├── core/
│   └── config.py          # 应用配置和环境变量
├── services/
│   └── media_service.py   # 媒体处理业务逻辑核心
└── schemas/
    └── media.py           # 数据模式和API响应结构
```

### 关键组件说明

#### 媒体处理服务 ([media_service.py](mdc:app/services/media_service.py))
- 负责音视频文件的智能处理流程
- 自动检测文件类型和大小
- 条件压缩：仅当文件>10MB时压缩
- 格式标准化：音频→MP3，视频→MP4
- Supabase Storage上传集成

#### API层 ([media.py](mdc:app/api/v1/endpoints/media.py))
- RESTful风格的文件上传端点
- 统一的错误处理和响应格式
- 依赖注入模式的服务管理

#### 配置管理 ([config.py](mdc:app/core/config.py))
- 基于Pydantic Settings的配置管理
- 环境变量自动加载
- Supabase和FFmpeg配置集中管理

## 开发规范

### API设计原则
1. **RESTful设计**: 使用标准HTTP方法和状态码
2. **统一响应格式**: 所有API使用相同的响应结构
3. **错误处理**: 统一的HTTPException处理机制
4. **异步优先**: 所有I/O操作使用async/await

### 媒体处理原则
1. **智能处理**: 只在必要时压缩和转换
2. **格式标准化**: 统一输出格式（MP3/MP4）
3. **临时文件管理**: 确保资源清理和安全性
4. **错误恢复**: 完整的异常处理和清理机制

### 代码质量要求
- 使用中文注释和文档字符串
- 类型提示必需（Python 3.12+）
- 异常处理要具体明确
- 资源管理要确保清理

## 部署和配置
- 环境配置通过.env文件管理
- Supabase认证信息需要正确配置
- FFmpeg需要在系统PATH中可用
- 临时文件目录权限要正确设置

## 扩展方向
本项目为AI背诵检查系统提供媒体文件处理基础，未来可能扩展：
- AI语音识别集成
- 背诵质量评估算法
- 用户管理和权限系统
- 批量处理和任务队列
# 鹦鹉背诵（Polly Memo）项目指南

## 项目概述
**鹦鹉背诵：AI驱动的中小学背诵作业自动化平台**

本项目是专为中小学教师和学生设计的背诵作业自动化平台的服务端，负责AI与媒体文件的处理，提供REST API服务。

### 核心功能
- 音视频文件上传和处理
- 智能压缩和格式标准化（音频→MP3，视频→MP4）
- 云存储集成（Supabase Storage）
- 为AI背诵检查提供媒体文件支持

## 技术栈
- **Web框架**: FastAPI 0.116+ (高性能异步API框架)
- **数据验证**: Pydantic (类型安全的数据模式)
- **媒体处理**: FFmpeg (音视频压缩和格式转换)
- **云存储**: Supabase Storage (文件存储和CDN)
- **依赖管理**: uv (现代Python包管理器)
- **Python版本**: 3.12+

## 项目架构

### 核心入口点
- [main.py](mdc:main.py) - FastAPI应用主入口，包含CORS配置和健康检查

### 应用结构
```
app/
├── api/v1/                 # API路由层
│   └── endpoints/
│       └── media.py        # 媒体文件处理端点
├── core/
│   └── config.py          # 应用配置和环境变量
├── services/
│   └── media_service.py   # 媒体处理业务逻辑核心
└── schemas/
    └── media.py           # 数据模式和API响应结构
```

### 关键组件说明

#### 媒体处理服务 ([media_service.py](mdc:app/services/media_service.py))
- 负责音视频文件的智能处理流程
- 自动检测文件类型和大小
- 条件压缩：仅当文件>10MB时压缩
- 格式标准化：音频→MP3，视频→MP4
- Supabase Storage上传集成

#### API层 ([media.py](mdc:app/api/v1/endpoints/media.py))
- RESTful风格的文件上传端点
- 统一的错误处理和响应格式
- 依赖注入模式的服务管理

#### 配置管理 ([config.py](mdc:app/core/config.py))
- 基于Pydantic Settings的配置管理
- 环境变量自动加载
- Supabase和FFmpeg配置集中管理

## 开发规范

### API设计原则
1. **RESTful设计**: 使用标准HTTP方法和状态码
2. **统一响应格式**: 所有API使用相同的响应结构
3. **错误处理**: 统一的HTTPException处理机制
4. **异步优先**: 所有I/O操作使用async/await

### 媒体处理原则
1. **智能处理**: 只在必要时压缩和转换
2. **格式标准化**: 统一输出格式（MP3/MP4）
3. **临时文件管理**: 确保资源清理和安全性
4. **错误恢复**: 完整的异常处理和清理机制

### 代码质量要求
- 使用中文注释和文档字符串
- 类型提示必需（Python 3.12+）
- 异常处理要具体明确
- 资源管理要确保清理

## 部署和配置
- 环境配置通过.env文件管理
- Supabase认证信息需要正确配置
- FFmpeg需要在系统PATH中可用
- 临时文件目录权限要正确设置

## 扩展方向
本项目为AI背诵检查系统提供媒体文件处理基础，未来可能扩展：
- AI语音识别集成
- 背诵质量评估算法
- 用户管理和权限系统
- 批量处理和任务队列
