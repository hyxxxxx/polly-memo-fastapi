---
globs: "*.py"
description: Python代码风格和规范指南
---

# Python 代码风格规范

## 代码格式

- 遵循 PEP 8 标准
- 行长度不超过 88 字符（Black 格式化器标准）
- 使用 4 个空格缩进，不使用 Tab
- 文件结尾保留一个空行

## 导入规范

导入顺序：
1. 标准库导入
2. 第三方库导入  
3. 本地应用导入

每组之间空一行，例如：
```python
# 标准库
from typing import Optional, List
import os

# 第三方库
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

# 本地导入
from app.core.config import settings
from app.models.user import User
```

## 类型注解

- 所有函数参数和返回值必须有类型注解
- 使用现代类型语法（Python 3.9+）：
  - `list[str]` 而不是 `List[str]`
  - `dict[str, int]` 而不是 `Dict[str, int]`
- 复杂类型使用 `typing` 模块
- 使用 `Optional[T]` 或 `T | None` 表示可选类型

## 函数和类定义

### 函数
- 函数名使用 snake_case
- 包含 docstring 说明功能、参数和返回值
- 异步函数优先用于 I/O 操作

```python
async def get_user_by_id(user_id: int) -> Optional[User]:
    """根据用户ID获取用户信息
    
    Args:
        user_id: 用户唯一标识符
        
    Returns:
        用户对象，如果不存在则返回None
        
    Raises:
        DatabaseError: 数据库连接错误
    """
```

### 类
- 类名使用 PascalCase
- 属性使用 snake_case
- 私有属性/方法使用前缀下划线

## 异常处理

- 具体的异常类型，避免裸露的 `except:`
- 使用 `HTTPException` 处理 API 错误
- 记录异常信息用于调试

```python
try:
    user = await get_user(user_id)
except UserNotFoundError:
    raise HTTPException(status_code=404, detail="用户不存在")
except DatabaseError as e:
    logger.error(f"数据库错误: {e}")
    raise HTTPException(status_code=500, detail="内部服务器错误")
```

## 注释规范

- 使用中文注释解释复杂逻辑
- 避免显而易见的注释
- 重要的业务逻辑必须有注释说明

## 常量和配置

- 常量使用 UPPER_SNAKE_CASE
- 配置项集中管理
- 敏感信息使用环境变量
